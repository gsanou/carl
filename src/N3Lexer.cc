#line 2 "src/N3Lexer.cc"
#line 18 "src/N3.l"

#include "Token.hh"




#line 10 "src/N3Lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 26
#define YY_END_OF_BUFFER 27
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[482] =
    {   0,
        0,    0,   27,   25,   18,   18,   25,   19,   25,   25,
       25,   11,    6,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   18,    0,   14,
        0,   19,    0,   15,    0,    0,   11,   12,    0,    0,
        0,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    3,    5,    0,
        4,    9,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   10,   10,   10,    0,    0,
        6,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   24,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
        0,    0,    0,   15,    0,    0,    0,    0,   12,    0,
        0,   13,    0,    0,    7,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    7,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    9,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   10,   10,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    8,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   13,    0,   13,
        0,    7,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
        7,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    9,    9,    0,    0,    0,   10,   10,
       10,    0,    0,    0,    0,    0,    0,   23,    0,    8,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   21,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    7,    7,    7,    0,    0,
        0,    7,    0,    0,    9,    9,    9,    0,    0,    0,
        9,    2,   10,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    8,    8,    0,    0,    0,   20,   17,    0,
        0,    0,    0,   16,    0,    0,    0,    0,    7,    0,
        0,    9,   10,   22,    8,    8,    8,    0,    0,    0,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        1,    8,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    6,    9,    6,   10,    6,
        6,    6,   11,    6,   12,   13,    6,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    6,   16,
       17,   18,   19,   20,   21,   22,   23,   23,   24,   25,
       26,   26,   27,   26,   26,   26,   26,   26,   26,   28,
       26,   29,   30,   26,   31,   26,   26,   32,   26,   26,
       33,   34,   33,   35,   36,    1,   37,   38,   23,   23,

       39,   40,   26,   26,   41,   26,   26,   42,   26,   43,
       26,   44,   26,   45,   46,   47,   48,   26,   26,   49,
       26,   26,    1,    1,    1,    6,   33,   50,   51,   52,
       52,   52,   52,   53,   54,   54,   54,   54,   54,   55,
       55,   54,   54,   56,   56,   56,   56,   56,   56,   56,
       57,   56,   56,   56,   56,   56,   56,   56,   56,   58,
       58,   58,   58,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   60,   60,   60,   60,   60,
       60,   60,   61,   62,   62,   62,   62,   62,   62,   63,
       64,   33,   33,   65,   66,   67,   67,   67,   67,   67,

       67,   67,   67,   68,   69,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   71,   72,   73,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   75,   33,   76,   77,
       78,   78,   79,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33
    } ;

static yyconst flex_int32_t yy_meta[80] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    4,    4,    4,
        4,    5,    4,    6,    4,    1,    4,    4,    4,    4,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    4,    4,    1,    8,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    9,
        9,    9,    9,    9,    9,    9,   10,    9,    9,    9,
       10,    9,    9,    9,    4,    8,    8,    4,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8
    } ;

static yyconst flex_int16_t yy_base[574] =
    {   0,
        0,    0, 1691, 2647,   78,   82,   81,    0,   79,   77,
     1676,   79,  110,   77, 1646,  124,   58,  192,   77,   71,
     1627, 1632, 1609, 1599,    0,   40,   44,   60,  102,    0,
      192,    0,  117,  187,  216,    0,  231,  124,  284, 1571,
      285,    0,   89, 1567,  300, 1562,  285,  106,  282,   98,
      328,  360,  404,    0,  151,  240,  236,  296,    0,  391,
        0,  406,  386,  408,    0,  423,  191,  192, 2647,  144,
     2647,  469,    0,  251,  253,  265,  461,    0,  499,    0,
      476,  425,  508,    0,  523, 1498,  299,  166,    0, 1494,
        0, 1447,    0,  278,  280,  526, 1400,  532,    0,  547,

        0,  562,  494,  564,    0,  579,  316,   83, 2647,  573,
     1417, 1410,    0,    0,    0, 1386,    0,  551,    0,  603,
        0,    0,    0,  613,    0,  300,    0,    0,    0, 2647,
      337,  655,  660, 2647,  293,  682,  687,  365,  356,  408,
     1426, 1424,  709,  714,  746,    0,  790, 1333,    0,  527,
      614,  770, 1330,  776,    0,  791,    0,  806,  627,  808,
        0,  823,    0,    0,    0, 1332,    0,  663,    0,  833,
        0,    0,    0,  690,    0,  439,    0,    0,    0,  879,
      884,  911, 1280,    0,  705,  747,  904, 1258,  910,    0,
      941,    0,  956,  786,  958,    0,  973,    0,    0, 1263,

        0,  860,    0,  983,    0,    0,    0,  876,    0,  522,
        0,    0,    0,    0,  717,  767,    0,    0,  265, 1266,
        0,  945,    0,  993,    0,    0,    0, 1003,    0,  609,
        0,    0,    0, 1047, 1041, 1115,    0,  771,  835,  905,
     1039,    0, 1115,    0, 1054, 1071, 1139,    0, 1154, 1190,
      354,  726, 1043,    0,    0,    0, 1208, 1209, 1210, 1238,
     1258,  747,  795, 1277, 1305, 1325, 1298, 1296, 1224, 1223,
     1345, 1377,    0,    0, 1163, 1100,    0, 1119,    0, 1321,
        0,    0,    0, 1171,    0,  881,    0,    0,    0,    0,
        0,    0,    0,    0, 1443, 1448,    0,    0, 1164,  925,

        0, 1180,    0, 1377,    0,    0,    0, 1214,    0,  900,
        0,    0,    0, 1475,    0,    0,    0,    0,  934, 1234,
     1259, 1215, 1246, 1250,    0,    0,    0, 1262, 1264, 1543,
        0,  859,    0, 1188, 1190, 1243,  831, 1273,    0, 1475,
        0, 1301, 1415, 1537,    0, 1573,    0,    0,  775,    0,
     1440,    0, 1583,    0,    0,    0, 1479,    0, 1000,    0,
        0,    0, 1268, 1270, 1299, 1306, 1629, 1634, 1656, 1661,
     1280, 1683, 1688, 1710, 1715, 1747,    0,    0,    0,    0,
        0,    0, 1813, 1818,    0,    0,    0,    0,    0,    0,
        0,  785,  629, 1357, 1822,    0,    0, 1238,  714,    0,

     1508,    0, 1747,    0,    0,    0, 1552,    0, 1085,    0,
        0,    0,    0,    0,    0,    0,    0, 1371, 2647, 1845,
     1851, 1872, 1878, 2647, 1899, 1905, 1926, 1932,    0, 1953,
     1959,    0, 1348, 1621,    0,    0,    0,    0,    0,    0,
        0, 1980, 1986, 2007, 1354, 2013, 2034, 2040, 1427, 2061,
      744,    0, 2067, 2088, 2094, 2115, 2121, 2142, 2148, 2169,
     1405, 2175, 2196, 1450, 2202, 2223, 2229, 2250, 2256, 2277,
     2283, 2304, 1642, 2310, 1653, 1222, 2331, 2337, 1654, 1655,
     2647, 2377, 2387, 2397, 2404, 2409,  695,  495, 2409, 2411,
     2413,  409, 2415, 2417, 2419,  402, 2421, 2423, 2425,  352,

     2427, 2429, 2431, 2436, 2436, 2438, 2440, 2442, 2452, 2462,
      296, 2464, 2466, 2468, 2470, 2472, 2474, 2476,  285, 2478,
     2480, 2482, 2484, 2486, 2488, 2490, 2495, 2498, 2497, 2499,
     2501, 2503,  218, 2505, 2507, 2509, 2511, 2521, 2531, 2533,
     2535, 2537, 2539, 2541, 2543, 2545, 2547, 2549, 2551, 2557,
     2560, 2559,  134, 2561, 2563, 2565, 2567, 2569, 2571, 2573,
     2583, 2593, 2595, 2597, 2599, 2601, 2603, 2605, 2607, 2609,
     2619, 2629, 2636
    } ;

static yyconst flex_int16_t yy_def[574] =
    {   0,
      481,    1,  481,  481,  481,  481,  482,  483,  484,  481,
      481,  481,  481,  485,  481,  486,  487,  481,   18,   18,
      481,  481,   18,   18,  488,  488,  481,  488,  481,  489,
      481,  490,  481,  481,  481,  491,  481,  481,  482,  481,
      481,  483,  484,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  492,  492,  481,  492,  481,  493,  481,
      494,  481,  481,  481,  495,  481,  485,  485,  481,  481,
      481,  481,  496,  496,  481,  496,  481,  497,  481,  498,
      481,  481,  481,  499,  481,  487,  487,  487,   18,   18,
       13,  481,  500,  500,  500,  500,   96,  481,  501,  481,

      502,  481,  481,  481,  503,  481,   18,   18,  481,  504,
       18,   18,   18,  505,  505,  481,  505,  481,  505,  481,
      505,  505,  505,  505,  505,  505,  506,  507,  508,  481,
      509,  481,  481,  481,  510,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  145,  481,  481,  511,  511,
      511,  511,  152,  481,  512,  481,  513,  481,  481,  481,
      514,  481,  145,  515,  515,  481,  515,  481,  515,  481,
      515,  515,  515,  515,  515,  515,  516,  517,  518,  481,
      481,  481,  481,  519,  519,  519,  519,  187,  481,  520,
      481,  521,  481,  481,  481,  522,  481,  523,  523,  481,

      523,  481,  523,  481,  523,  523,  523,  523,  523,  523,
      524,  525,  526,  527,  528,  528,  529,  529,  481,  529,
      529,  481,  529,  481,  529,  529,  529,  529,  529,  529,
      530,  531,  532,  481,  234,  481,  533,  533,  481,  533,
      481,  534,  481,  535,  481,  481,  481,  536,  481,  234,
      234,  234,  234,  537,  537,  537,  538,  538,  481,  481,
      481,  539,  539,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  540,  540,  481,  540,  540,  481,  540,  481,
      540,  540,  540,  540,  540,  540,  541,  542,  543,  272,
      272,  544,  544,  544,  481,  481,  545,  545,  481,  545,

      545,  481,  545,  481,  545,  545,  545,  545,  545,  545,
      546,  547,  548,  481,  314,  549,  549,  549,  550,  551,
      551,  234,  234,  234,  552,  552,  552,  234,  234,  481,
      330,  481,  553,  553,  553,  553,  336,  481,  554,  481,
      555,  481,  481,  481,  556,  481,  557,  557,  481,  557,
      481,  557,  481,  557,  557,  557,  557,  557,  557,  558,
      559,  560,  234,  234,  234,  561,  481,  481,  481,  481,
      562,  481,  481,  481,  481,  481,  376,  376,  563,  563,
      563,  376,  481,  481,  314,  314,  314,  564,  564,  564,
      314,  551,  551,  234,  234,  565,  565,  481,  565,  565,

      481,  565,  481,  565,  565,  565,  565,  565,  565,  566,
      567,  568,  330,  330,  569,  569,  569,  234,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  376,  481,
      481,  314,  551,  234,  330,  330,  330,  570,  570,  570,
      330,  481,  481,  481,  571,  481,  481,  481,  572,  481,
      551,  330,  481,  481,  481,  481,  481,  481,  481,  481,
      561,  481,  481,  562,  481,  481,  481,  481,  481,  481,
      481,  481,  571,  481,  572,  573,  481,  481,  561,  562,
        0,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481
    } ;

static yyconst flex_int16_t yy_nxt[2727] =
    {   0,
        4,    5,    6,    5,    5,    4,    7,    8,    4,    9,
       10,   10,   11,   12,   13,   14,   15,    4,   16,   17,
       18,   19,   18,   18,   18,   18,   18,   20,   18,   18,
       18,   18,    4,    4,   21,   22,   18,   19,   18,   23,
       18,   18,   18,   20,   18,   18,   24,   18,   18,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,   25,   26,    4,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       38,   38,   38,   38,   38,   38,   38,   40,   44,   46,
       47,   49,   47,   68,   69,   87,  113,  107,  134,  108,

      113,   88,   50,  113,  113,  113,  235,  113,  141,  141,
       70,  142,   45,  107,   41,  108,  113,   50,   51,   48,
      113,  235,   45,   52,   52,   38,   38,   38,   38,  138,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  330,   53,  138,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,  114,
      114,  114,  114,  114,  114,  114,  122,  122,  122,  122,
      122,  122,  122,  122,  180,   54,   55,  214,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   73,
       74,  181,   75,   76,   77,   78,   79,   80,   81,   82,

       83,   84,   85,   89,   90,   89,   91,   52,   69,   69,
      216,   52,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   70,   70,  236,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,  116,  117,  117,  118,  123,  123,  124,  125,  125,
      126,  119,  119,  119,  119,  120,   92,   93,   94,   95,
       96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
      106,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      130,   39,   52,  182,   39,  139,   52,   49,   47,   52,

       52,   52,  263,   52,  145,  140,   43,   72,   50,   43,
      214,   72,   72,   72,   72,  132,   72,   41,   39,  322,
      140,   72,   39,   50,   39,   72,  264,   39,   89,   39,
      136,   39,  133,   43,   89,  215,   89,   43,   89,   43,
       89,  143,   43,  258,   43,  234,   43,  137,  143,  143,
      143,  143,  143,  164,  164,  164,  164,  164,  164,  164,
       89,  234,  481,  481,  143,  143,  143,  143,  144,  139,
      259,  145,  146,  145,  145,  267,  267,   89,  268,  140,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  364,  147,  140,  145,  145,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  163,
       72,  163,  163,  163,  163,  163,  163,   52,  269,  269,
      163,  270,  163,  163,  148,  149,  150,  151,  152,  153,
      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
      166,  167,  167,  168,  173,  173,  174,  175,  175,  176,
      169,  169,  169,  169,  170,  172,  172,  172,  172,  172,
      172,  172,  172,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  182,  207,  207,  208,  209,  209,  210,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,

      182,  481,  481,  113,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  198,  198,
      198,  198,  198,  198,  198,  206,  206,  206,  206,  206,
      206,  206,  206,  183,  184,  185,  186,  187,  188,  189,
      190,  191,  192,  193,  194,  195,  196,  197,  200,  201,
      201,  202,  227,  227,  228,  229,  229,  230,  203,  203,
      203,  203,  204,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,   89,  145,  481,  481,   89,  145,  481,  217,
      217,  217,  217,  217,  217,  217,  219,  220,  221,  222,

      252,  252,  252,  252,  252,  252,  223,  223,  223,  223,
      224,  226,  226,  226,  226,  226,  226,  226,  226,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  237,  238,
      214,  239,  240,  241,  242,  243,  244,  245,  246,  247,
      248,  249,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  253,  253,  253,  253,  253,  253,  260,  433,
      145,  481,  481,  261,  145,  260,  260,  260,  260,  260,
      261,  261,  261,  261,  261,  283,  283,  284,  285,  285,
      286,  260,  260,  260,  260,  265,  261,  261,  261,  261,

      266,   86,  265,  265,  265,  265,  265,  266,  266,  266,
      266,  266,  290,  290,  290,  290,  290,  290,  265,  265,
      265,  265,  163,  266,  266,  266,  266,  271,  214,  163,
      163,  163,  163,  163,  271,  271,  271,  271,  271,  291,
      291,  291,  291,  291,  291,  163,  163,  163,  163,   89,
      271,  271,  271,  271,  144,  214,  263,  145,  146,  145,
      145,  182,  320,  436,   89,  182,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  214,  147,
      264,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  272,  214,  272,  272,  272,

      272,  272,  272,  182,  371,  321,  272,  182,  272,  272,
      148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
      158,  159,  160,  161,  162,  272,  145,  236,  264,  413,
      145,  236,  481,  273,  273,  273,  273,  273,  273,  273,
      275,  276,  277,  278,  307,  307,  308,  309,  309,  310,
      279,  279,  279,  279,  280,  282,  282,  282,  282,  282,
      282,  282,  282,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  295,  330,  236,  236,  236,  296,  236,  295,

      295,  295,  295,  295,  296,  296,  296,  296,  296,  314,
      314,  314,  314,  314,  314,  295,  295,  295,  295,  330,
      296,  296,  296,  296,  182,  315,  315,  315,  315,  315,
      315,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  481,  481,  214,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  236,  481,  481,  182,  236,  481,  297,  297,  297,
      297,  297,  297,  297,  386,  183,  184,  185,  186,  187,
      188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
      299,  300,  301,  302,  322,  322,  322,  322,  322,  322,

      303,  303,  303,  303,  304,  306,  306,  306,  306,  306,
      306,  306,  306,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  324,  324,  324,  324,  324,  324,   89,   90,
       89,   91,  481,  481,   89,  329,   89,   89,   89,   89,
      328,   89,   89,   89,   89,   89,   89,   89,   89,   89,
      329,   89,   89,   89,   89,  328,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,  347,  347,  347,  347,

      347,  347,  347,  355,  355,  355,  355,  355,  355,  355,
      355,   92,   93,   94,   95,   96,   97,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  330,  331,  330,  356,
      356,  357,  358,  358,  359,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  481,  481,  377,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  349,  350,  350,  351,  376,  376,
      376,  376,  376,  376,  352,  352,  352,  352,  353,  332,
      333,  334,  335,  336,  337,  338,  339,  340,  341,  342,
      343,  344,  345,  346,  360,  360,  360,  360,  360,  360,

      360,  360,  360,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,   89,  258,  366,  257,  376,  385,  257,
      378,  378,  378,  378,  378,  378,  145,  182,   89,  385,
      385,  385,  385,  385,  385,  363,  270,  270,   89,   69,
      367,  259,  259,  257,  330,  214,  330,  257,  330,  257,
      330,  369,  257,   89,  257,   70,  257,  368,  369,  369,
      369,  369,  369,  387,  387,  387,  387,  387,  387,   89,
      214,  370,  392,   89,  369,  369,  369,  369,  370,  370,
      370,  370,  370,  262,   89,   89,  262,   89,   89,  424,
      395,   89,  435,   89,  370,  370,  370,  370,  393,  330,

       89,  330,   89,  330,  395,  481,  418,  372,   89,  268,
      262,  268,  419,  264,  262,  323,  262,  314,  374,  262,
      182,  262,   89,  262,  373,  374,  374,  374,  374,  374,
      396,  396,  396,  396,  396,  396,  396,   89,  375,  259,
      182,  374,  374,  374,  374,  375,  375,  375,  375,  375,
      405,  405,  405,  405,  405,  405,  405,  405,  272,  214,
      130,  375,  375,  375,  375,  272,  272,  272,  272,  272,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
       89,  272,  272,  272,  272,  144,  290,   41,  145,  146,
      145,  145,  145,  145,   89,   89,  451,  145,  145,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,   89,
      147,  258,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  134,  142,  259,  142,
      252,  148,  149,  150,  151,  152,  153,  154,  155,  156,
      157,  158,  159,  160,  161,  162,  383,  251,  250,  263,
       45,  384,   89,  383,  383,  383,  383,  383,  384,  384,
      384,  384,  384,  406,  406,  407,  408,  408,  409,  383,
      383,  383,  383,  264,  384,  384,  384,  384,  182,  413,
      413,  413,  413,  413,  413,  182,  182,  182,  182,  182,

      182,  182,  182,  182,  182,  182,  182,   89,  481,  214,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  398,  399,  400,  401,  414,  414,
      414,  414,  414,  414,  402,  402,  402,  402,  403,  183,
      184,  185,  186,  187,  188,  189,  190,  191,  192,  193,
      194,  195,  196,  197,  330,  331,  330,  435,  435,  435,
      435,  435,  435,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,   48,  135,  131,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  410,  410,  410,  410,  410,  410,  410,  410,

      410,  437,  437,  437,  437,  437,  437,  332,  333,  334,
      335,  336,  337,  338,  339,  340,  341,  342,  343,  344,
      345,  346,  412,  412,  412,  412,  412,  412,  412,  412,
      412,  412,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  420,  112,   89,  111,  110,  421,  130,  420,
      420,  420,  420,  420,  421,  421,  421,  421,  421,   89,
      258,  109,  134,   71,  263,  420,  420,  420,  420,  422,
      421,  421,  421,  421,  423,   41,  422,  422,  422,  422,
      422,  423,  423,  423,  423,  423,   45,  259,  264,   48,
      481,  481,  422,  422,  422,  422,  425,  423,  423,  423,

      423,  426,  481,  425,  425,  425,  425,  425,  426,  426,
      426,  426,  426,  481,  481,  481,  481,  481,  481,  425,
      425,  425,  425,  427,  426,  426,  426,  426,  428,  481,
      427,  427,  427,  427,  427,  428,  428,  428,  428,  428,
      481,  481,  481,  481,  481,  481,  427,  427,  427,  427,
      481,  428,  428,  428,  428,  144,  481,  481,  145,  146,
      145,  145,  481,  481,  481,  481,  481,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  481,
      147,  481,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  435,  435,  435,  435,

      435,  435,  435,  435,  435,  435,  481,  481,  481,  481,
      481,  148,  149,  150,  151,  152,  153,  154,  155,  156,
      157,  158,  159,  160,  161,  162,  430,  481,  481,  481,
      481,  431,  481,  430,  430,  430,  430,  430,  431,  431,
      431,  431,  431,  481,  481,   89,  481,  481,  481,  430,
      430,  430,  430,  434,  431,  431,  431,  431,  442,  481,
       89,  481,  481,  481,  443,  442,  442,  442,  442,  442,
      434,  443,  443,  443,  443,  443,  481,  481,  481,  481,
      481,  442,  442,  442,  442,  444,  481,  443,  443,  443,
      443,  445,  444,  444,  444,  444,  444,  481,  445,  445,

      445,  445,  445,  481,  481,  481,  481,  481,  444,  444,
      444,  444,  446,  481,  445,  445,  445,  445,  447,  446,
      446,  446,  446,  446,  481,  447,  447,  447,  447,  447,
      481,  481,  481,  481,  481,  446,  446,  446,  446,  448,
      481,  447,  447,  447,  447,  449,  448,  448,  448,  448,
      448,  481,  449,  449,  449,  449,  449,  481,  481,  481,
      481,  481,  448,  448,  448,  448,  450,  481,  449,  449,
      449,  449,   67,  450,  450,  450,  450,  450,  481,   67,
       67,   67,   67,   67,  481,  481,  481,  481,  481,  450,
      450,  450,  450,  453,  481,   67,   67,   67,   67,  454,

      453,  453,  453,  453,  453,  481,  454,  454,  454,  454,
      454,  481,  481,  481,  481,  481,  453,  453,  453,  453,
      455,  481,  454,  454,  454,  454,  456,  455,  455,  455,
      455,  455,  481,  456,  456,  456,  456,  456,  481,  481,
      481,  481,  481,  455,  455,  455,  455,  457,  481,  456,
      456,  456,  456,  458,  457,  457,  457,  457,  457,  481,
      458,  458,  458,  458,  458,  481,  481,  481,  481,  481,
      457,  457,  457,  457,  459,  481,  458,  458,  458,  458,
      460,  459,  459,  459,  459,  459,  481,  460,  460,  460,
      460,  460,  481,  481,  481,  481,  481,  459,  459,  459,

      459,  461,  481,  460,  460,  460,  460,  462,  461,  461,
      461,  461,  461,  481,  462,  462,  462,  462,  462,  481,
      481,  481,  481,  481,  461,  461,  461,  461,  463,  481,
      462,  462,  462,  462,  464,  463,  463,  463,  463,  463,
      481,  464,  464,  464,  464,  464,  481,  481,  481,  481,
      481,  463,  463,  463,  463,  465,  481,  464,  464,  464,
      464,  466,  465,  465,  465,  465,  465,  481,  466,  466,
      466,  466,  466,  481,  481,  481,  481,  481,  465,  465,
      465,  465,  467,  481,  466,  466,  466,  466,  468,  467,
      467,  467,  467,  467,  481,  468,  468,  468,  468,  468,

      481,  481,  481,  481,  481,  467,  467,  467,  467,  469,
      481,  468,  468,  468,  468,  470,  469,  469,  469,  469,
      469,  481,  470,  470,  470,  470,  470,  481,  481,  481,
      481,  481,  469,  469,  469,  469,  471,  481,  470,  470,
      470,  470,  472,  471,  471,  471,  471,  471,  481,  472,
      472,  472,  472,  472,  481,  481,  481,  481,  481,  471,
      471,  471,  471,  473,  481,  472,  472,  472,  472,  474,
      473,  473,  473,  473,  473,  481,  474,  474,  474,  474,
      474,  481,  481,  481,  481,  481,  473,  473,  473,  473,
      475,  481,  474,  474,  474,  474,  476,  475,  475,  475,

      475,  475,  481,  476,  476,  476,  476,  476,  481,  481,
      481,  481,  481,  475,  475,  475,  475,  477,  481,  476,
      476,  476,  476,  478,  477,  477,  477,  477,  477,  481,
      478,  478,  478,  478,  478,  481,  481,  481,  481,  481,
      477,  477,  477,  477,  479,  481,  478,  478,  478,  478,
      480,  479,  479,  479,  479,  479,  481,  480,  480,  480,
      480,  480,  481,  481,  481,  481,  481,  479,  479,  479,
      479,  481,  481,  480,  480,  480,  480,   39,  481,  481,
       39,   39,   39,   39,   39,   39,   39,   42,  481,   42,
       42,   42,   42,   42,   42,   42,   42,   43,  481,  481,

       43,   43,   43,   43,   43,   43,   43,   67,   67,   67,
       67,   67,   67,   67,   72,   72,   72,  115,  115,  121,
      121,  128,  128,  165,  165,  171,  171,  178,  178,  199,
      199,  205,  205,  212,  212,  218,  218,  225,  225,  232,
      232,  236,  236,  236,  252,  252,  254,  254,  255,  255,
      256,  256,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  274,  274,  281,  281,  288,  288,  290,  290,
      292,  292,  293,  293,  294,  294,  298,  298,  305,  305,
      312,  312,  314,  314,  316,  316,  317,  317,  318,  318,

      319,  319,   86,  481,   86,  322,  322,  325,  325,  326,
      326,  327,  327,  348,  348,  354,  354,  361,  361,  365,
      365,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  376,  376,  379,  379,  380,  380,  381,  381,  382,
      382,  385,  385,  388,  388,  389,  389,  390,  390,  391,
      391,  319,  319,  319,   86,  481,   86,  394,  394,  397,
      397,  404,  404,  411,  411,  413,  413,  415,  415,  416,
      416,  417,  417,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  262,  262,  262,  262,  262,  262,  262,

      262,  262,  262,  429,  429,  432,  432,  435,  435,  438,
      438,  439,  439,  440,  440,  441,  441,  452,  452,   39,
      481,  481,   39,   39,   39,   39,   39,   39,   39,   43,
      481,  481,   43,   43,   43,   43,   43,   43,   43,   67,
       67,   67,   67,   67,   67,   67,    3,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481
    } ;

static yyconst flex_int16_t yy_chk[2727] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    6,    6,    6,    6,    7,    9,   10,
       10,   12,   12,   14,   14,   17,   26,   19,   43,   20,

       26,   17,   12,   27,   27,   27,  108,   27,   50,   50,
       14,   50,    9,   19,    7,   20,   28,   12,   13,   48,
       28,  108,   43,   13,   13,   38,   38,   38,   38,   48,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,  553,   13,   48,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   29,
       29,   29,   29,   29,   29,   29,   33,   33,   33,   33,
       33,   33,   33,   33,   70,   13,   13,   88,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   16,
       16,   70,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   18,   18,   18,   18,   55,   67,   68,
       88,   55,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   67,   68,  533,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   31,   31,   31,   31,   34,   34,   34,   34,   34,
       34,   31,   31,   31,   31,   31,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       39,   41,   57,  519,   41,   49,   57,   47,   47,   56,

       56,   56,  135,   56,  511,   49,   45,   74,   47,   45,
       87,   74,   75,   75,   75,   41,   75,   39,   41,  219,
       49,   76,   41,   47,   41,   76,  135,   41,  219,   41,
       45,   41,   41,   45,   94,   87,   95,   45,   94,   45,
       95,   51,   45,  131,   45,  107,   45,   45,   51,   51,
       51,   51,   51,   58,   58,   58,   58,   58,   58,   58,
      500,  107,  126,  126,   51,   51,   51,   51,   52,  139,
      131,   52,   52,   52,   52,  138,  138,  251,  138,  139,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  251,   52,  139,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   53,
      496,   53,   53,   53,   53,   53,   53,  492,  140,  140,
       53,  140,   53,   53,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   53,
       60,   60,   60,   60,   63,   63,   63,   63,   63,   63,
       60,   60,   60,   60,   60,   62,   62,   62,   62,   62,
       62,   62,   62,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   72,   82,   82,   82,   82,   82,   82,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,

       72,  176,  176,  488,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   77,   77,
       77,   77,   77,   77,   77,   81,   81,   81,   81,   81,
       81,   81,   81,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   79,   79,
       79,   79,  103,  103,  103,  103,  103,  103,   79,   79,
       79,   79,   79,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   96,  150,  210,  210,   96,  150,   96,   98,
       98,   98,   98,   98,   98,   98,  100,  100,  100,  100,

      118,  118,  118,  118,  118,  118,  100,  100,  100,  100,
      100,  102,  102,  102,  102,  102,  102,  102,  102,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  110,  110,
      393,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  124,  124,  124,  124,  124,  124,  132,  393,
      151,  230,  230,  133,  151,  132,  132,  132,  132,  132,
      133,  133,  133,  133,  133,  159,  159,  159,  159,  159,
      159,  132,  132,  132,  132,  136,  133,  133,  133,  133,

      137,  487,  136,  136,  136,  136,  136,  137,  137,  137,
      137,  137,  168,  168,  168,  168,  168,  168,  136,  136,
      136,  136,  143,  137,  137,  137,  137,  144,  215,  143,
      143,  143,  143,  143,  144,  144,  144,  144,  144,  174,
      174,  174,  174,  174,  174,  143,  143,  143,  143,  252,
      144,  144,  144,  144,  145,  451,  262,  145,  145,  145,
      145,  185,  215,  399,  252,  185,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  216,  145,
      262,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  147,  392,  147,  147,  147,

      147,  147,  147,  186,  263,  216,  147,  186,  147,  147,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  147,  152,  238,  263,  349,
      152,  238,  152,  154,  154,  154,  154,  154,  154,  154,
      156,  156,  156,  156,  194,  194,  194,  194,  194,  194,
      156,  156,  156,  156,  156,  158,  158,  158,  158,  158,
      158,  158,  158,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  180,  337,  239,  239,  239,  181,  239,  180,

      180,  180,  180,  180,  181,  181,  181,  181,  181,  202,
      202,  202,  202,  202,  202,  180,  180,  180,  180,  332,
      181,  181,  181,  181,  182,  208,  208,  208,  208,  208,
      208,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  286,  286,  319,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      187,  240,  310,  310,  187,  240,  187,  189,  189,  189,
      189,  189,  189,  189,  300,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      191,  191,  191,  191,  222,  222,  222,  222,  222,  222,

      191,  191,  191,  191,  191,  193,  193,  193,  193,  193,
      193,  193,  193,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  228,  228,  228,  228,  228,  228,  234,  234,
      234,  234,  359,  359,  235,  235,  253,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  235,
      235,  253,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  241,  241,  241,  241,

      241,  241,  241,  245,  245,  245,  245,  245,  245,  245,
      245,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  236,  236,  236,  246,
      246,  246,  246,  246,  246,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  409,  409,  276,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  243,  243,  243,  243,  278,  278,
      278,  278,  278,  278,  243,  243,  243,  243,  243,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  250,  257,  258,  259,  275,  299,  259,
      284,  284,  284,  284,  284,  284,  275,  299,  250,  302,
      302,  302,  302,  302,  302,  250,  270,  269,  322,  476,
      259,  257,  258,  259,  334,  320,  335,  259,  334,  259,
      335,  260,  259,  322,  259,  476,  259,  259,  260,  260,
      260,  260,  260,  308,  308,  308,  308,  308,  308,  323,
      321,  261,  320,  324,  260,  260,  260,  260,  261,  261,
      261,  261,  261,  264,  323,  328,  264,  329,  324,  371,
      329,  363,  398,  364,  261,  261,  261,  261,  321,  336,

      328,  398,  329,  336,  329,  336,  363,  264,  364,  268,
      264,  267,  366,  371,  264,  220,  264,  200,  265,  264,
      188,  264,  365,  264,  264,  265,  265,  265,  265,  265,
      338,  338,  338,  338,  338,  338,  338,  365,  266,  366,
      183,  265,  265,  265,  265,  266,  266,  266,  266,  266,
      342,  342,  342,  342,  342,  342,  342,  342,  271,  433,
      445,  266,  266,  266,  266,  271,  271,  271,  271,  271,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      394,  271,  271,  271,  271,  272,  166,  445,  272,  272,
      272,  272,  153,  148,  418,  394,  433,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  418,
      272,  461,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  449,  142,  461,  141,
      116,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  295,  112,  111,  464,
      449,  296,   97,  295,  295,  295,  295,  295,  296,  296,
      296,  296,  296,  343,  343,  343,  343,  343,  343,  295,
      295,  295,  295,  464,  296,  296,  296,  296,  314,  351,
      351,  351,  351,  351,  351,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,   92,   90,   86,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  340,  340,  340,  340,  357,  357,
      357,  357,  357,  357,  340,  340,  340,  340,  340,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  330,  330,  330,  401,  401,  401,
      401,  401,  401,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,   46,   44,   40,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  407,  407,  407,  407,  407,  407,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  346,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  367,   24,  434,   23,   22,  368,  473,  367,
      367,  367,  367,  367,  368,  368,  368,  368,  368,  434,
      479,   21,  475,   15,  480,  367,  367,  367,  367,  369,
      368,  368,  368,  368,  370,  473,  369,  369,  369,  369,
      369,  370,  370,  370,  370,  370,  475,  479,  480,   11,
        3,    0,  369,  369,  369,  369,  372,  370,  370,  370,

      370,  373,    0,  372,  372,  372,  372,  372,  373,  373,
      373,  373,  373,    0,    0,    0,    0,    0,    0,  372,
      372,  372,  372,  374,  373,  373,  373,  373,  375,    0,
      374,  374,  374,  374,  374,  375,  375,  375,  375,  375,
        0,    0,    0,    0,    0,    0,  374,  374,  374,  374,
        0,  375,  375,  375,  375,  376,    0,    0,  376,  376,
      376,  376,    0,    0,    0,    0,    0,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,    0,
      376,    0,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  403,  403,  403,  403,

      403,  403,  403,  403,  403,  403,    0,    0,    0,    0,
        0,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  383,    0,    0,    0,
        0,  384,    0,  383,  383,  383,  383,  383,  384,  384,
      384,  384,  384,    0,    0,  395,    0,    0,    0,  383,
      383,  383,  383,  395,  384,  384,  384,  384,  420,    0,
      395,    0,    0,    0,  421,  420,  420,  420,  420,  420,
      395,  421,  421,  421,  421,  421,    0,    0,    0,    0,
        0,  420,  420,  420,  420,  422,    0,  421,  421,  421,
      421,  423,  422,  422,  422,  422,  422,    0,  423,  423,

      423,  423,  423,    0,    0,    0,    0,    0,  422,  422,
      422,  422,  425,    0,  423,  423,  423,  423,  426,  425,
      425,  425,  425,  425,    0,  426,  426,  426,  426,  426,
        0,    0,    0,    0,    0,  425,  425,  425,  425,  427,
        0,  426,  426,  426,  426,  428,  427,  427,  427,  427,
      427,    0,  428,  428,  428,  428,  428,    0,    0,    0,
        0,    0,  427,  427,  427,  427,  430,    0,  428,  428,
      428,  428,  431,  430,  430,  430,  430,  430,    0,  431,
      431,  431,  431,  431,    0,    0,    0,    0,    0,  430,
      430,  430,  430,  442,    0,  431,  431,  431,  431,  443,

      442,  442,  442,  442,  442,    0,  443,  443,  443,  443,
      443,    0,    0,    0,    0,    0,  442,  442,  442,  442,
      444,    0,  443,  443,  443,  443,  446,  444,  444,  444,
      444,  444,    0,  446,  446,  446,  446,  446,    0,    0,
        0,    0,    0,  444,  444,  444,  444,  447,    0,  446,
      446,  446,  446,  448,  447,  447,  447,  447,  447,    0,
      448,  448,  448,  448,  448,    0,    0,    0,    0,    0,
      447,  447,  447,  447,  450,    0,  448,  448,  448,  448,
      453,  450,  450,  450,  450,  450,    0,  453,  453,  453,
      453,  453,    0,    0,    0,    0,    0,  450,  450,  450,

      450,  454,    0,  453,  453,  453,  453,  455,  454,  454,
      454,  454,  454,    0,  455,  455,  455,  455,  455,    0,
        0,    0,    0,    0,  454,  454,  454,  454,  456,    0,
      455,  455,  455,  455,  457,  456,  456,  456,  456,  456,
        0,  457,  457,  457,  457,  457,    0,    0,    0,    0,
        0,  456,  456,  456,  456,  458,    0,  457,  457,  457,
      457,  459,  458,  458,  458,  458,  458,    0,  459,  459,
      459,  459,  459,    0,    0,    0,    0,    0,  458,  458,
      458,  458,  460,    0,  459,  459,  459,  459,  462,  460,
      460,  460,  460,  460,    0,  462,  462,  462,  462,  462,

        0,    0,    0,    0,    0,  460,  460,  460,  460,  463,
        0,  462,  462,  462,  462,  465,  463,  463,  463,  463,
      463,    0,  465,  465,  465,  465,  465,    0,    0,    0,
        0,    0,  463,  463,  463,  463,  466,    0,  465,  465,
      465,  465,  467,  466,  466,  466,  466,  466,    0,  467,
      467,  467,  467,  467,    0,    0,    0,    0,    0,  466,
      466,  466,  466,  468,    0,  467,  467,  467,  467,  469,
      468,  468,  468,  468,  468,    0,  469,  469,  469,  469,
      469,    0,    0,    0,    0,    0,  468,  468,  468,  468,
      470,    0,  469,  469,  469,  469,  471,  470,  470,  470,

      470,  470,    0,  471,  471,  471,  471,  471,    0,    0,
        0,    0,    0,  470,  470,  470,  470,  472,    0,  471,
      471,  471,  471,  474,  472,  472,  472,  472,  472,    0,
      474,  474,  474,  474,  474,    0,    0,    0,    0,    0,
      472,  472,  472,  472,  477,    0,  474,  474,  474,  474,
      478,  477,  477,  477,  477,  477,    0,  478,  478,  478,
      478,  478,    0,    0,    0,    0,    0,  477,  477,  477,
      477,    0,    0,  478,  478,  478,  478,  482,    0,    0,
      482,  482,  482,  482,  482,  482,  482,  483,    0,  483,
      483,  483,  483,  483,  483,  483,  483,  484,    0,    0,

      484,  484,  484,  484,  484,  484,  484,  485,  485,  485,
      485,  485,  485,  485,  486,  486,  486,  489,  489,  490,
      490,  491,  491,  493,  493,  494,  494,  495,  495,  497,
      497,  498,  498,  499,  499,  501,  501,  502,  502,  503,
      503,  504,  504,  504,  505,  505,  506,  506,  507,  507,
      508,  508,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  512,  512,  513,  513,  514,  514,  515,  515,
      516,  516,  517,  517,  518,  518,  520,  520,  521,  521,
      522,  522,  523,  523,  524,  524,  525,  525,  526,  526,

      527,  527,  528,    0,  528,  529,  529,  530,  530,  531,
      531,  532,  532,  534,  534,  535,  535,  536,  536,  537,
      537,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  540,  540,  541,  541,  542,  542,  543,  543,  544,
      544,  545,  545,  546,  546,  547,  547,  548,  548,  549,
      549,  550,  550,  550,  551,    0,  551,  552,  552,  554,
      554,  555,  555,  556,  556,  557,  557,  558,  558,  559,
      559,  560,  560,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  562,  562,  562,  562,  562,  562,  562,

      562,  562,  562,  563,  563,  564,  564,  565,  565,  566,
      566,  567,  567,  568,  568,  569,  569,  570,  570,  571,
        0,    0,  571,  571,  571,  571,  571,  571,  571,  572,
        0,    0,  572,  572,  572,  572,  572,  572,  572,  573,
      573,  573,  573,  573,  573,  573,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[27] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 
    0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/N3.l"
/*
 * Copyright 2017 Giovanni Mels
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#line 1238 "src/N3Lexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 55 "src/N3.l"


#line 1346 "src/N3Lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 482 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 481 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 57 "src/N3.l"
{ return n3::Token::Prefix; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 58 "src/N3.l"
{ return n3::Token::Base; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 59 "src/N3.l"
{ return n3::Token::ReverseImplies; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 60 "src/N3.l"
{ return n3::Token::Implies; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 61 "src/N3.l"
{ return n3::Token::IriRef; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 62 "src/N3.l"
{ return n3::Token::PNameNS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 63 "src/N3.l"
{ return n3::Token::PNameLN; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 64 "src/N3.l"
{ return n3::Token::BlankNodeLabel; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 65 "src/N3.l"
{ return n3::Token::Var; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 66 "src/N3.l"
{ return n3::Token::LangTag; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 67 "src/N3.l"
{ return n3::Token::Integer; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 68 "src/N3.l"
{ return n3::Token::Decimal; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 69 "src/N3.l"
{ return n3::Token::Double; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 70 "src/N3.l"
{ return n3::Token::StringLiteralQuote; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 71 "src/N3.l"
{ return n3::Token::StringLiteralSingleQuote; }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 72 "src/N3.l"
{ return n3::Token::StringLiteralLongSingleQuote; }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 73 "src/N3.l"
{ return n3::Token::StringLiteralLongQuote; }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 74 "src/N3.l"

	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "src/N3.l"

	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "src/N3.l"
{ return n3::Token::False; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "src/N3.l"
{ return n3::Token::True; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 78 "src/N3.l"
{ return n3::Token::SparqlPrefix; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 79 "src/N3.l"
{ return n3::Token::SparqlBase; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 80 "src/N3.l"
{ return n3::Token::CaretCaret; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 81 "src/N3.l"
{ return yytext[0]; } /* [.;,()[\]a] */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 83 "src/N3.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1568 "src/N3Lexer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 482 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 482 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 481);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 83 "src/N3.l"




